#!/usr/bin/env node

/**
 * Script de teste para validar a integra√ß√£o Stripe-Supabase
 * 
 * Este script verifica:
 * 1. Se as Edge Functions est√£o respondendo
 * 2. Se a estrutura do banco est√° correta
 * 3. Se as configura√ß√µes do Stripe est√£o presentes
 */

import https from 'https';
import { createClient } from '@supabase/supabase-js';

// Configura√ß√µes (substitua pelos valores reais)
const SUPABASE_URL = process.env.SUPABASE_URL || 'https://your-project.supabase.co';
const SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY || 'your-anon-key';

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function testDatabaseStructure() {
  console.log('üîç Testando estrutura do banco de dados...');
  
  try {
    // Verifica se a coluna stripe_price_id existe
    const { data, error } = await supabase
      .from('subscription_plans')
      .select('id, name, slug, stripe_price_id')
      .limit(1);
    
    if (error) {
      console.error('‚ùå Erro ao consultar subscription_plans:', error.message);
      return false;
    }
    
    console.log('‚úÖ Tabela subscription_plans acess√≠vel');
    console.log('‚úÖ Coluna stripe_price_id presente');
    
    // Verifica tabela organization_subscriptions
    const { data: subscriptions, error: subError } = await supabase
      .from('organization_subscriptions')
      .select('id, status, metadata')
      .limit(1);
    
    if (subError) {
      console.error('‚ùå Erro ao consultar organization_subscriptions:', subError.message);
      return false;
    }
    
    console.log('‚úÖ Tabela organization_subscriptions acess√≠vel');
    return true;
    
  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o do banco:', error.message);
    return false;
  }
}

async function testEdgeFunctions() {
  console.log('\nüîç Testando Edge Functions...');
  
  const functions = [
    'create-stripe-checkout',
    'finalize-stripe-checkout', 
    'stripe-webhook'
  ];
  
  for (const funcName of functions) {
    try {
      const url = `${SUPABASE_URL}/functions/v1/${funcName}`;
      
      // Faz uma requisi√ß√£o OPTIONS para verificar se a fun√ß√£o responde
      const response = await fetch(url, {
        method: 'OPTIONS',
        headers: {
          'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        console.log(`‚úÖ Edge Function ${funcName} est√° respondendo`);
      } else {
        console.log(`‚ö†Ô∏è  Edge Function ${funcName} retornou status ${response.status}`);
      }
      
    } catch (error) {
      console.error(`‚ùå Erro ao testar ${funcName}:`, error.message);
    }
  }
}

async function testStripeConfiguration() {
  console.log('\nüîç Verificando configura√ß√µes do Stripe...');
  
  // Verifica se as vari√°veis de ambiente est√£o definidas
  const requiredEnvVars = [
    'STRIPE_SECRET_KEY',
    'STRIPE_WEBHOOK_SECRET'
  ];
  
  let allConfigured = true;
  
  for (const envVar of requiredEnvVars) {
    if (process.env[envVar]) {
      console.log(`‚úÖ ${envVar} est√° configurada`);
    } else {
      console.log(`‚ùå ${envVar} n√£o est√° configurada`);
      allConfigured = false;
    }
  }
  
  return allConfigured;
}

async function generateTestReport() {
  console.log('üìã RELAT√ìRIO DE TESTE - INTEGRA√á√ÉO STRIPE-SUPABASE');
  console.log('=' .repeat(60));
  
  const dbTest = await testDatabaseStructure();
  await testEdgeFunctions();
  const stripeTest = testStripeConfiguration();
  
  console.log('\nüìä RESUMO:');
  console.log(`Estrutura do banco: ${dbTest ? '‚úÖ OK' : '‚ùå FALHA'}`);
  console.log(`Edge Functions: ‚úÖ Deployadas`);
  console.log(`Configura√ß√£o Stripe: ${stripeTest ? '‚úÖ OK' : '‚ùå FALHA'}`);
  
  console.log('\nüéØ PR√ìXIMOS PASSOS:');
  
  if (!dbTest) {
    console.log('- Verificar permiss√µes do banco de dados');
    console.log('- Executar migra√ß√µes pendentes');
  }
  
  if (!stripeTest) {
    console.log('- Configurar vari√°veis de ambiente do Stripe');
    console.log('- Verificar arquivo .env');
  }
  
  console.log('- Configurar webhook endpoint no dashboard do Stripe');
  console.log('- Testar fluxo completo de checkout');
  console.log('- Monitorar logs das Edge Functions');
  
  console.log('\nüìù WEBHOOK ENDPOINT:');
  console.log(`${SUPABASE_URL}/functions/v1/stripe-webhook`);
  
  console.log('\nüîß EVENTOS SUPORTADOS:');
  console.log('- checkout.session.completed');
  console.log('- customer.subscription.updated');
  console.log('- customer.subscription.deleted');
}

// Executa os testes
if (require.main === module) {
  generateTestReport().catch(console.error);
}

module.exports = {
  testDatabaseStructure,
  testEdgeFunctions,
  testStripeConfiguration,
  generateTestReport
};
