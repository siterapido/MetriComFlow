-- Stripe checkout integration support

-- Add Stripe mapping columns to subscription plans
ALTER TABLE public.subscription_plans
  ADD COLUMN IF NOT EXISTS stripe_price_id TEXT,
  ADD COLUMN IF NOT EXISTS stripe_product_id TEXT,
  ADD COLUMN IF NOT EXISTS stripe_metadata JSONB DEFAULT '{}'::JSONB;

COMMENT ON COLUMN public.subscription_plans.stripe_price_id IS 'Stripe price identifier used for checkout sessions';
COMMENT ON COLUMN public.subscription_plans.stripe_product_id IS 'Optional Stripe product identifier for reference';
COMMENT ON COLUMN public.subscription_plans.stripe_metadata IS 'Additional Stripe specific configuration';

-- Add Stripe identifiers to organization subscriptions
ALTER TABLE public.organization_subscriptions
  ADD COLUMN IF NOT EXISTS stripe_customer_id TEXT,
  ADD COLUMN IF NOT EXISTS stripe_subscription_id TEXT,
  ADD COLUMN IF NOT EXISTS stripe_checkout_session_id TEXT,
  ADD COLUMN IF NOT EXISTS stripe_payment_intent_id TEXT,
  ADD COLUMN IF NOT EXISTS stripe_invoice_id TEXT;

COMMENT ON COLUMN public.organization_subscriptions.stripe_customer_id IS 'Stripe customer id linked to the organization subscription';
COMMENT ON COLUMN public.organization_subscriptions.stripe_subscription_id IS 'Stripe subscription id created for recurring billing';
COMMENT ON COLUMN public.organization_subscriptions.stripe_checkout_session_id IS 'Last Stripe checkout session used to start the subscription';
COMMENT ON COLUMN public.organization_subscriptions.stripe_payment_intent_id IS 'Payment intent associated with the last Stripe payment';
COMMENT ON COLUMN public.organization_subscriptions.stripe_invoice_id IS 'Latest Stripe invoice id tracked locally';

-- Ensure subscription payments table exists with Stripe fields
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1
    FROM information_schema.tables
    WHERE table_schema = 'public'
      AND table_name = 'subscription_payments'
  ) THEN
    CREATE TABLE public.subscription_payments (
      id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
      subscription_id UUID NOT NULL REFERENCES public.organization_subscriptions(id) ON DELETE CASCADE,
      amount NUMERIC(10, 2) NOT NULL,
      payment_method TEXT,
      status TEXT NOT NULL,
      due_date TIMESTAMP WITH TIME ZONE NOT NULL,
      payment_date TIMESTAMP WITH TIME ZONE,
      asaas_payment_id TEXT,
      asaas_invoice_url TEXT,
      stripe_payment_intent_id TEXT,
      stripe_invoice_id TEXT,
      stripe_hosted_invoice_url TEXT,
      stripe_receipt_url TEXT,
      metadata JSONB DEFAULT '{}'::JSONB,
      created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
      updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
    );

    ALTER TABLE public.subscription_payments ENABLE ROW LEVEL SECURITY;
  END IF;
END $$;

ALTER TABLE public.subscription_payments
  ADD COLUMN IF NOT EXISTS stripe_payment_intent_id TEXT,
  ADD COLUMN IF NOT EXISTS stripe_invoice_id TEXT,
  ADD COLUMN IF NOT EXISTS stripe_hosted_invoice_url TEXT,
  ADD COLUMN IF NOT EXISTS stripe_receipt_url TEXT;

COMMENT ON COLUMN public.subscription_payments.stripe_payment_intent_id IS 'Payment intent id generated by Stripe';
COMMENT ON COLUMN public.subscription_payments.stripe_invoice_id IS 'Stripe invoice id for the payment record';
COMMENT ON COLUMN public.subscription_payments.stripe_hosted_invoice_url IS 'URL to the hosted invoice page on Stripe';
COMMENT ON COLUMN public.subscription_payments.stripe_receipt_url IS 'Direct receipt or PDF URL provided by Stripe';

CREATE INDEX IF NOT EXISTS idx_subscription_payments_subscription_id
  ON public.subscription_payments(subscription_id);
CREATE INDEX IF NOT EXISTS idx_subscription_payments_stripe_invoice_id
  ON public.subscription_payments(stripe_invoice_id);
CREATE INDEX IF NOT EXISTS idx_subscription_payments_stripe_payment_intent
  ON public.subscription_payments(stripe_payment_intent_id);

-- RLS policies for subscription payments
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies
    WHERE schemaname = 'public'
      AND tablename = 'subscription_payments'
      AND policyname = 'Members can view subscription payments'
  ) THEN
    CREATE POLICY "Members can view subscription payments"
      ON public.subscription_payments FOR SELECT
      USING (
        EXISTS (
          SELECT 1
          FROM public.organization_subscriptions os
          JOIN public.organization_memberships om
            ON om.organization_id = os.organization_id
          WHERE os.id = subscription_payments.subscription_id
            AND om.user_id = auth.uid()
            AND om.is_active = TRUE
        )
      );
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies
    WHERE schemaname = 'public'
      AND tablename = 'subscription_payments'
      AND policyname = 'Service role manages subscription payments'
  ) THEN
    CREATE POLICY "Service role manages subscription payments"
      ON public.subscription_payments FOR ALL
      USING (auth.jwt() ->> 'role' = 'service_role')
      WITH CHECK (auth.jwt() ->> 'role' = 'service_role');
  END IF;
END $$;

-- Updated_at trigger
DROP TRIGGER IF EXISTS trg_subscription_payments_updated_at ON public.subscription_payments;
CREATE TRIGGER trg_subscription_payments_updated_at
  BEFORE UPDATE ON public.subscription_payments
  FOR EACH ROW
  EXECUTE FUNCTION public.set_timestamp_updated_at();

COMMENT ON TABLE public.subscription_payments IS 'Individual payment records for organization subscriptions with Stripe metadata';
